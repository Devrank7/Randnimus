from aiogram.types import Message

from api.location.location import get_city_from_coordinates, get_city_by_coordinates
from db.sql.model import Users
from db.sql.service import run_sql, ReadConnection


def prepare_id(message: Message, first_user_id, second_user_id):
    data = {
        "sender": message.from_user.id,
        "consumer": second_user_id if message.from_user.id == first_user_id else first_user_id
    }
    return data


async def check_and_notify_connect(message: Message) -> bool:
    connect, first_user_id, second_user_id = await run_sql(ReadConnection(message.from_user.id))
    if first_user_id != -1 and second_user_id != -1:
        await message.answer("–í—ã —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º! ü§†")
    return first_user_id != -1 and second_user_id != -1


def get_info(user: Users, is_vip) -> str:
    if is_vip:
        city = get_city_by_coordinates(user.location.latitude, user.location.longitude)
        first_name = user.first_name
        last_name = user.last_name
        username = user.username
        text = f"–î–∞–Ω–Ω—ã–µ: –¢–µ–ª–µ–≥—Ä–∞–º –∏–º—è @{username}, \n –ò–º—è: {first_name}, \n –§–∞–º–∏–ª–∏—è: {last_name}, \n " \
               f"–í–æ–∑—Ä–∞—Å—Ç {user.age}, \n –ü–æ–ª: {user.sex} \n –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: {city}"
        return text
    return "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ–∫—É–ø–∞–π—Ç–µ VIP üíé"
